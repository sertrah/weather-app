{"version":3,"sources":["application/components/Container/Container.module.scss","application/components/Footer/Footer.tsx","application/components/Header/Header.tsx","application/components/AppLayout.tsx","application/components/Loader/Loader.tsx","application/components/NotificationMessage/NotificationMessage.tsx","application/components/NotificationMessage/index.ts","application/components/Container/Container.tsx","application/components/LineChart/LineChart.tsx","application/components/BarChart/BarChart.tsx","application/components/RangeSlider/RangeSlider.tsx","presentation-layer/dashboard/ChanceRainChart.tsx","presentation-layer/dashboard/AmountRainFallChart.tsx","infraestructure/helpers/api.ts","infraestructure/helpers/fetch-json.js","infraestructure/services/weatherService.ts","application/contexts/NotificationContext.tsx","presentation-layer/dashboard/Dashboard.tsx","application/hooks/useNotification.ts","application/constants/routerPathList.js","application/routes.js","presentation-layer/dashboard/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Footer","Header","className","src","alt","AppLayout","children","id","Loader","text","NotificationMessage","notifications","mountingElement","createPortal","map","title","message","status","classnames","Container","props","cn","styles","container","Axis","points","fill","stroke","strokeWidth","LineChart","data","height","width","numberOfHorizontalGuides","horizontalGuides","numberOfVerticalGuides","verticalGuides","precision","FONT_SIZE","maximumYFromData","Math","max","e","value","maximumXFromData","label","digits","parseFloat","toString","toFixed","length","padding","chartWidth","chartHeight","getPoints","position","element","x","y","join","calcPoints","points1","points2","XAxis","YAxis","VerticalGuides","guideCount","startY","endY","Array","_","index","xCoordinate","Fragment","HorizontalGuides","startX","endX","yCoordinate","LabelsXAxis","style","fontSize","fontFamily","LabelsYAxis","PARTS","viewBox","defaultProps","colorList","BarChart","amount","dataRecords","day","calcValues","flag","record","i","RangeSlider","min","onChange","labelPosition","Number","left","type","event","target","ChanceRainChart","weatherList","AmountRainFallChart","API_URL","process","call","path","options","url","fetchJSON","catch","error","Promise","reject","api","method","defaultMessage","statusText","a","headers","Accept","body","JSON","stringify","fetch","response","json","ok","weatherService","NotificationContext","createContext","defaultConfig","duration","document","removeById","prev","filter","NotificationProvider","config","useState","notificationList","setNotificationList","handleClose","useCallback","clearTimeout","notify","useMemo","notifyFn","notification","setTimeout","list","notifyStatus","success","Provider","onClose","chanceOfRain","pressure","temperature","score","log","mean","upper_bound","Dashboard","setPressure","setTemperature","context","useContext","Error","useNotification","useQuery","retry","retryDelay","onError","rainFallList","isLoading","chanceOfRainCalculated","days","ROUTER_PATH_LIST","routes","component","queryClient","QueryClient","App","QueryClientProvider","client","basename","fallback","Component","rest","key","render","exact","from","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5bcc5e86.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3Tf2R\"};","import React, { FunctionComponent } from \"react\"; \r\n\r\nconst Footer: FunctionComponent = () => (\r\n  <footer>\r\n  </footer>\r\n);\r\n\r\nexport default Footer","import React, { FunctionComponent } from \"react\"; // importing FunctionComponent\r\n\r\nconst Header: FunctionComponent = () => {\r\n\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <img src=\"https://cdn.iconscout.com/icon/free/png-256/adidas-trefoil-555388.png\" alt=\"adidas logo\"/>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { FunctionComponent } from \"react\";\r\nimport Footer from \"./Footer\";\r\nimport Header from \"./Header\";\r\n\r\ntype AppLayoutProps = {\r\n  children?: React.ReactNode;\r\n};\r\n\r\nconst AppLayout: FunctionComponent<AppLayoutProps> = ({ children }) => (\r\n  <>\r\n    <Header />\r\n    <main id=\"main--container\">{children}</main>\r\n    <Footer />\r\n  </>\r\n);\r\n\r\nexport default AppLayout;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\ntype CardProps = {\r\n  text?: string;\r\n};\r\n\r\nconst Loader: FunctionComponent<CardProps> = ({ text }) => (\r\n  <div className=\"loader\">\r\n    <div className=\"loader--container\">\r\n      <div className=\"loader--item\"></div>\r\n      <p>{text}</p>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React, { FunctionComponent } from \"react\";\nimport classnames from \"classnames\";\n\nimport { createPortal } from \"react-dom\";\n\ntype NotificationMessageProps = {\n  notifications: { id: number; title?: string; message?: string; status?: boolean; }[];\n  mountingElement: Element;\n  onClose: any;\n};\n\nconst NotificationMessage: FunctionComponent<NotificationMessageProps> = ({\n  notifications,\n  mountingElement,\n}) => {\n  return createPortal(\n    <div className=\"notification-container top-right\">\n      {notifications.map(({ id, title, message, status }) => (\n        <div key={id} className={classnames(\"notify-styleee\", `notify__${status}`) }>\n          <strong> {title}</strong>\n          {message}\n        </div>\n      ))}\n    </div>,\n    mountingElement\n  );\n};\n\nexport default NotificationMessage;\n","import NotificationMessage from './NotificationMessage';\nimport './notificationMessage.scss';\n\n\nexport default NotificationMessage;\n","import React, { FC, HTMLAttributes } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nimport styles from \"./Container.module.scss\";\r\n\r\nconst Container: FC<HTMLAttributes<HTMLDivElement>> = ({\r\n  className,\r\n  children,\r\n  ...props\r\n}) => (\r\n  <div {...props} className={cn(styles.container, className)}>\r\n    {children}\r\n  </div>\r\n);\r\n\r\nexport default Container;","import React, { FunctionComponent } from \"react\";\r\n\r\nconst STROKE = 1;\r\n\r\nconst Axis: FunctionComponent<{ points: string }> = ({ points }) => (\r\n  <polyline fill=\"none\" stroke=\"#ccc\" strokeWidth=\".5\" points={points} />\r\n);\r\n\r\nconst calcPoints = (\r\n  data: { value: number[]; label: number }[],\r\n  maximumXFromData: number,\r\n  chartWidth: number,\r\n  padding: number,\r\n  chartHeight: number,\r\n  maximumYFromData: number\r\n) => (position: number): string => {\r\n  return data\r\n    .map((element) => {\r\n      const x = ((element.label - 1) / maximumXFromData) * chartWidth + padding;\r\n      const y =\r\n        chartHeight -\r\n        (element.value[position] / maximumYFromData) * chartHeight +\r\n        padding;\r\n      return `${x},${y}`;\r\n    })\r\n    .join(\" \");\r\n};\r\ntype LineChartProps = {\r\n  data: { value: number[]; label: number }[];\r\n  height: number;\r\n  width: number;\r\n  horizontalGuides: number;\r\n  verticalGuides: number | null;\r\n  precision?: number;\r\n};\r\nconst LineChart: FunctionComponent<LineChartProps> = ({\r\n  data,\r\n  height,\r\n  width,\r\n  horizontalGuides: numberOfHorizontalGuides,\r\n  verticalGuides: numberOfVerticalGuides,\r\n  precision,\r\n}) => {\r\n  const FONT_SIZE = width / 50;\r\n  const maximumYFromData = Math.max(...data.map((e) => Math.max(...e.value)));\r\n  const maximumXFromData = Math.max(...data.map((e) => e.label));\r\n\r\n  const digits: number =\r\n    parseFloat(maximumYFromData.toString()).toFixed(precision).length + 1;\r\n\r\n  const padding = (FONT_SIZE + digits) * 3;\r\n  const chartWidth = width - padding * 2;\r\n  const chartHeight = height - padding * 2;\r\n\r\n  const getPoints = calcPoints(data, maximumXFromData, chartWidth, padding, chartHeight, maximumYFromData)\r\n  const points = getPoints(0)\r\n  const points1 = getPoints(1)\r\n  const points2 = getPoints(2)\r\n\r\n  const XAxis = () => (\r\n    <Axis\r\n      points={`${padding},${height - padding} ${width - padding},${\r\n        height - padding\r\n      }`}\r\n    />\r\n  );\r\n\r\n  const YAxis = () => (\r\n    <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\r\n  );\r\n\r\n  const VerticalGuides: FunctionComponent = () => {\r\n    const guideCount: number = numberOfVerticalGuides || data.length - 1;\r\n\r\n    const startY = padding;\r\n    const endY = height - padding;\r\n\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        {new Array(guideCount).fill(0).map((_, index) => {\r\n          const ratio = (index + 1) / guideCount;\r\n\r\n          const xCoordinate = padding + ratio * (width - padding * 2);\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <polyline\r\n                fill=\"none\"\r\n                stroke=\"#ccc\"\r\n                strokeWidth=\".5\"\r\n                points={`${xCoordinate},${startY} ${xCoordinate},${endY}`}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const HorizontalGuides: FunctionComponent = () => {\r\n    const startX = padding;\r\n    const endX = width - padding;\r\n\r\n    return (\r\n      <>\r\n        {new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\r\n          const ratio = (index + 1) / numberOfHorizontalGuides;\r\n\r\n          const yCoordinate = chartHeight - chartHeight * ratio + padding;\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <polyline\r\n                fill=\"none\"\r\n                stroke={\"#ccc\"}\r\n                strokeWidth=\".5\"\r\n                points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const LabelsXAxis: FunctionComponent = () => {\r\n    const y = height - padding + FONT_SIZE * 2;\r\n    return (\r\n      <>\r\n        {data.map((element, index) => {\r\n          const x =\r\n            ((element.label - 1)  / maximumXFromData) * chartWidth +\r\n            padding -\r\n            FONT_SIZE / 2;\r\n          return (\r\n            <text\r\n              key={index}\r\n              x={x}\r\n              y={y}\r\n              style={{\r\n                fill: \"#808080\",\r\n                fontSize: FONT_SIZE,\r\n                fontFamily: \"Helvetica\",\r\n              }}\r\n            >\r\n              {element.label}\r\n            </text>\r\n          );\r\n        })}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const LabelsYAxis: FunctionComponent = () => {\r\n    const PARTS = numberOfHorizontalGuides;\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        {new Array(PARTS + 1).fill(0).map((_, index) => {\r\n          const x = FONT_SIZE;\r\n          const ratio = index / numberOfHorizontalGuides;\r\n\r\n          const yCoordinate =\r\n            chartHeight - chartHeight * ratio + padding + FONT_SIZE / 2;\r\n          return (\r\n            <text\r\n              key={index}\r\n              x={x}\r\n              y={yCoordinate}\r\n              style={{\r\n                fill: \"#808080\",\r\n                fontSize: FONT_SIZE,\r\n                fontFamily: \"Helvetica\",\r\n              }}\r\n            >\r\n              {parseFloat(`${maximumYFromData * (index / PARTS)}`).toFixed(\r\n                precision\r\n              )}\r\n            </text>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <svg\r\n      viewBox={`0 0 ${width} ${height}`}\r\n      //style={{ border: \"0.5px solid #ccc\" }}\r\n    >\r\n      <XAxis />\r\n      <LabelsXAxis />\r\n      <YAxis />\r\n      <LabelsYAxis />\r\n      {numberOfVerticalGuides && <VerticalGuides />}\r\n      <HorizontalGuides />\r\n\r\n        <polyline\r\n          fill=\"none\"\r\n          stroke=\"var(--primary)\"\r\n          strokeWidth={STROKE}\r\n          points={points}\r\n        />\r\n        <polyline\r\n          fill=\"none\"\r\n          stroke=\"var(--secundary)\"\r\n          strokeWidth={STROKE}\r\n          points={points1}\r\n        />\r\n        <polyline\r\n          fill=\"none\"\r\n          stroke=\"var(--niceColor)\"\r\n          strokeWidth={STROKE}\r\n          points={points2}\r\n        />\r\n      \r\n    </svg>\r\n  );\r\n};\r\n\r\nLineChart.defaultProps = {\r\n  height: 200,\r\n  width: 500,\r\n  horizontalGuides: 4,\r\n  verticalGuides: null,\r\n  precision: 2,\r\n};\r\n\r\nexport default LineChart;\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nconst colorList = [\r\n  \"var(--niceColor)\",\r\n  \"var(--primary)\",\r\n  \"var(--primary-dark)\",\r\n  \"var(--secundary)\",\r\n  \"var(--niceColor)\",\r\n  \"var(--secundary-dark)\",\r\n  \"var(--primary)\",\r\n];\r\nconst Axis: FunctionComponent<{ points: string }> = ({ points }) => (\r\n  <polyline fill=\"none\" stroke=\"#ccc\" strokeWidth=\".5\" points={points} />\r\n);\r\n\r\nconst calcValues = (\r\n  data: { amount: number; day: number }[],\r\n  maximumYFromData: number\r\n): { position: { x: number; y: number }; height: number }[] => {\r\n  return data.map((x) => {\r\n    const position = {\r\n      x: (x.day + 1) * 43,\r\n      y: maximumYFromData - x.amount + 2,\r\n    };\r\n    const height = x.amount;\r\n    return { position, height };\r\n  });\r\n};\r\ntype BarChartProps = {\r\n  data: { amount: number; day: number }[];\r\n  height: number;\r\n  width: number;\r\n  horizontalGuides: number;\r\n  verticalGuides: number | null;\r\n  precision?: number;\r\n};\r\nconst BarChart: FunctionComponent<BarChartProps> = ({\r\n  data,\r\n  height,\r\n  width,\r\n  horizontalGuides: numberOfHorizontalGuides,\r\n  precision,\r\n}) => {\r\n  const FONT_SIZE = width / 50;\r\n  const maximumYFromData = Math.max(...data.map((e) => e.amount));\r\n  const digits: number =\r\n    parseFloat(maximumYFromData.toString()).toFixed(precision).length + 1;\r\n\r\n  const padding = (FONT_SIZE + digits) * 3;\r\n  const chartHeight = height - padding * 2;\r\n\r\n  const dataRecords = calcValues(data, height - 50);\r\n\r\n  const XAxis = () => (\r\n    <Axis\r\n      points={`${padding},${height - padding} ${width - padding},${\r\n        height - padding\r\n      }`}\r\n    />\r\n  );\r\n\r\n  const YAxis = () => (\r\n    <Axis points={`${padding},${padding} ${padding},${height - padding}`} />\r\n  );\r\n\r\n  const HorizontalGuides: FunctionComponent = () => {\r\n    const startX = padding;\r\n    const endX = width - padding;\r\n\r\n    return (\r\n      <>\r\n        {new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\r\n          const ratio = (index + 1) / numberOfHorizontalGuides;\r\n\r\n          const yCoordinate = chartHeight - chartHeight * ratio + padding;\r\n\r\n          return (\r\n            <React.Fragment key={index}>\r\n              <polyline\r\n                fill=\"none\"\r\n                stroke={\"#ccc\"}\r\n                strokeWidth=\".5\"\r\n                points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\r\n              />\r\n            </React.Fragment>\r\n          );\r\n        })}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const LabelsXAxis: FunctionComponent = () => {\r\n    const y = height - padding + FONT_SIZE * 2;\r\n    let flag = 40;\r\n    return (\r\n      <>\r\n        {data.map((element, index) => {\r\n          const x = (element.day + 1) * 30 + flag;\r\n          flag += 15;\r\n          return (\r\n            <text\r\n              key={index}\r\n              x={x}\r\n              y={y}\r\n              style={{\r\n                fill: \"#808080\",\r\n                fontSize: FONT_SIZE,\r\n                fontFamily: \"Helvetica\",\r\n              }}\r\n            >\r\n              {element.day}\r\n            </text>\r\n          );\r\n        })}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n\r\n  const LabelsYAxis: FunctionComponent = () => {\r\n    const PARTS = numberOfHorizontalGuides;\r\n    return (\r\n      <>\r\n        {\" \"}\r\n        {new Array(PARTS + 1).fill(0).map((_, index) => {\r\n          const x = FONT_SIZE;\r\n          const ratio = index / numberOfHorizontalGuides;\r\n\r\n          const yCoordinate =\r\n            chartHeight - chartHeight * ratio + padding + FONT_SIZE / 2;\r\n          return (\r\n            <text\r\n              key={index}\r\n              x={x}\r\n              y={yCoordinate}\r\n              style={{\r\n                fill: \"#808080\",\r\n                fontSize: FONT_SIZE,\r\n                fontFamily: \"Helvetica\",\r\n              }}\r\n            >\r\n              {parseFloat(\r\n                `${(maximumYFromData + 50) * (index / PARTS)}`\r\n              ).toFixed(precision)}\r\n            </text>\r\n          );\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <svg viewBox={`0 0 ${width} ${height}`}>\r\n      <XAxis />\r\n      <LabelsXAxis />\r\n      <YAxis />\r\n      <LabelsYAxis />\r\n\r\n      <HorizontalGuides />\r\n\r\n      {dataRecords.map((record, i) => {\r\n        return (\r\n          <rect\r\n            width=\"43\"\r\n            x={record.position.x}\r\n            y={record.position.y}\r\n            key={`barchart-${i}`}\r\n            height={record.height}\r\n            style={{\r\n              fill: colorList[i],\r\n            }}\r\n          />\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n};\r\n\r\nBarChart.defaultProps = {\r\n  height: 200,\r\n  width: 500,\r\n  horizontalGuides: 4,\r\n  verticalGuides: null,\r\n  precision: 2,\r\n};\r\n\r\nexport default BarChart;\r\n","import React, { FC, SetStateAction, Dispatch } from \"react\";\r\n\r\nimport \"./rangeSlider.scss\";\r\n\r\ntype RangeSliderProps = {\r\n  title?: string;\r\n  max: number;\r\n  min: number;\r\n  value: number;\r\n  onChange: Dispatch<SetStateAction<number>>;\r\n};\r\nconst RangeSlider: FC<RangeSliderProps> = ({ title, max, min, value, onChange, ...props }) => {\r\n    const width = 200;\r\n    const labelPosition = Number(((value - min) * 98) / (max - min));\r\n    return (\r\n        <div className=\"rangeSlider\" style={{width}}>\r\n          {title && <p className=\"rangeSlider--text\">{title}</p>}\r\n          {value && <p className=\"rangeSlider--label\" style={{left: `calc(${labelPosition}% + (${2 - labelPosition * 0.15}px))`}} >{value}</p>}\r\n          <input\r\n            type=\"range\"\r\n            min={min}\r\n            max={max}\r\n            value={value}\r\n            className=\"rangeSlider--input\"\r\n            onChange={(event)=> onChange(+event.target.value)}\r\n            {...props}\r\n          />\r\n        </div>\r\n      )\r\n};\r\n\r\nexport default RangeSlider;\r\n","import React, { FunctionComponent } from \"react\"; // importing FunctionComponent\r\nimport { LineChart } from \"application/components\";\r\n\r\nconst ChanceRainChart: FunctionComponent<{ weatherList: any }> = ({\r\n  weatherList,\r\n}) => {\r\n  return (\r\n    <article>\r\n      <h2>Chance Rain Chart</h2>\r\n      <LineChart\r\n        width={500}\r\n        height={300}\r\n        data={weatherList}\r\n        horizontalGuides={6}\r\n        precision={1}\r\n        verticalGuides={3}\r\n      />\r\n    </article>\r\n  );\r\n};\r\n\r\nexport default ChanceRainChart;\r\n","import React, { FunctionComponent } from \"react\"; // importing FunctionComponent\r\nimport { BarChart } from \"application/components\";\r\n\r\nconst AmountRainFallChart: FunctionComponent<{ weatherList: any }> = ({weatherList}) => (\r\n  <section>\r\n    <h2>AmountRainFallChart</h2>\r\n    <BarChart\r\n        width={500}\r\n        height={300}\r\n        data={weatherList}\r\n        horizontalGuides={5}\r\n        precision={1}\r\n        verticalGuides={1}\r\n      />\r\n  </section>\r\n);\r\n\r\nexport default AmountRainFallChart","import { fetchJSON } from \"infraestructure/helpers\";\r\n\r\nconst API_URL = `${process.env.REACT_APP_DOMAIN}`;\r\n\r\nfunction call(\r\n  path: string,\r\n  options: { headers?: any; method?: string; body?: any } = {}\r\n) {\r\n  const url = `${API_URL}/${path}`;\r\n\r\n  return fetchJSON(url, options).catch((error: any) => {\r\n    return Promise.reject(error);\r\n  });\r\n}\r\n\r\nconst get = (path: string) => {\r\n  return call(path, { method: \"GET\" });\r\n};\r\n\r\nexport const api = { call, get };\r\n","const defaultMessage = ({ status, statusText }) =>\r\n  statusText || `${status} error code occurred`;\r\n\r\nexport async function fetchJSON(url, options = {}) {\r\n  const headers = {\r\n    Accept: \"application/json\",\r\n    \"Content-Type\": \"application/json\"\r\n  };\r\n\r\n  options.headers = options.headers\r\n    ? {\r\n        ...headers,\r\n        ...options.headers\r\n      }\r\n    : headers;\r\n\r\n  if (options.body) {\r\n    options.body = JSON.stringify(options.body);\r\n  }\r\n\r\n  const response = await fetch(url, options);\r\n\r\n  try {\r\n    const json = await response.json();\r\n    return response.ok\r\n      ? json\r\n      : Promise.reject({\r\n          ...json,\r\n          status: json.status || response.status,\r\n          message: json.message || defaultMessage(response)\r\n        });\r\n  } catch (error) {\r\n    return response.ok\r\n      ? {}\r\n      : Promise.reject({\r\n          status: response.status,\r\n          message: defaultMessage(response)\r\n        });\r\n  }\r\n}\r\n","import { api } from \"infraestructure/helpers\";\r\nimport { IRainFall } from \"application/types\";\r\n\r\nfunction getAll(): Promise<IRainFall[]> {\r\n  return api.get(`weather34/rain`) ;\r\n}\r\n\r\nexport const weatherService = {\r\n  getAll,\r\n};\r\n","import React, {\n  createContext,\n  useState,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport NotificationMessage from \"../components/NotificationMessage\";\n\ntype ContextProps = any;\n\nconst NotificationContext = createContext<Partial<ContextProps>  | null>(null);\n\nconst defaultConfig = {\n  duration: 3000,\n  mountingElement: document.body,\n};\nconst removeById = (id: number) => (prev: any) =>\n  prev.length > 0 ? prev.filter((a: any) => a.id !== id) : prev;\n\nconst  NotificationProvider = ({ children, config }: any)  => {\n  const [notificationList, setNotificationList] = useState<{id: number, title?: string, message?: string}[]>([]);\n  const { duration = 3000, mountingElement = document.body } = {\n    ...defaultConfig,\n    ...config,\n  };\n\n  const handleClose = useCallback(\n    (id) => {\n      clearTimeout(id);\n      setNotificationList(removeById(id));\n    },\n    [setNotificationList]\n  );\n\n  const notify = useMemo(() => {\n    const notifyFn = (notification: any) => {\n      const id: any = setTimeout(() => {\n        setNotificationList(removeById(id));\n      }, duration);\n      setNotificationList((list) => [...list, { id, ...notification }]);\n    };\n\n    const notifyStatus = (status: any) => (notification: any) =>\n      notifyFn({ ...notification, status });\n\n    notifyFn.success = notifyStatus(\"success\");\n    notifyFn.error = notifyStatus(\"error\");\n\n    return notifyFn;\n  }, [setNotificationList, duration]);\n\n  return (\n    <>\n      <NotificationContext.Provider value={notify}>\n        {children}\n      </NotificationContext.Provider>\n      <NotificationMessage\n        notifications={notificationList}\n        onClose={handleClose}\n        mountingElement={mountingElement}\n      />\n    </>\n  );\n}\n\nexport { NotificationContext, NotificationProvider };\n","import React, { FunctionComponent, useState, useMemo } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\n\r\nimport ChanceRainChart from \"./ChanceRainChart\";\r\nimport AmountRainFallChart from \"./AmountRainFallChart\";\r\nimport { RangeSlider, Container, Loader } from \"application/components\";\r\nimport { weatherService } from \"infraestructure/services\";\r\nimport { useNotification } from \"application/hooks\";\r\n\r\nfunction chanceOfRain(pressure: number, temperature: number, amount: number) {\r\n  var score =\r\n    Math.log(amount + 1) * Math.log(pressure - 929) * Math.log(temperature - 9);\r\n  var mean = Math.min(Math.max(score, 0), 100);\r\n  var upper_bound = Math.min(1.5 * mean, 100);\r\n  var lower_bound = Math.max(0.5 * mean, 0);\r\n  return [lower_bound, mean, upper_bound];\r\n}\r\n\r\nconst Dashboard: FunctionComponent = () => {\r\n  const [pressure, setPressure] = useState(1030);\r\n  const [temperature, setTemperature] = useState(30);\r\n  const notify = useNotification();\r\n \r\n\r\n  const { data: rainFallList, isLoading } = useQuery(\r\n    \"rainFallList\",\r\n    weatherService.getAll,\r\n    {\r\n      retry: 1,\r\n      retryDelay: 3000,\r\n      onError: (error)=> {\r\n        notify.success({\r\n          title: \"Weather Service\",\r\n          message: error,\r\n        });\r\n      }\r\n    }\r\n  );\r\n  const chanceOfRainCalculated = useMemo(() => {\r\n    return (\r\n      rainFallList &&\r\n      rainFallList[0].days.map(({ amount, day }) => ({\r\n        label: day,\r\n        value: chanceOfRain(pressure, temperature, amount),\r\n      }))\r\n    );\r\n  }, [pressure, temperature, rainFallList]);\r\n  return (\r\n    <Container>\r\n      <h1>Adidas Technical Test</h1>\r\n      {isLoading && <Loader />}\r\n      <section className=\"dashboard__container\">\r\n        <RangeSlider\r\n          title=\"Pressure [hPa]\"\r\n          max={1030}\r\n          min={970}\r\n          value={pressure}\r\n          onChange={setPressure}\r\n        />\r\n\r\n        {chanceOfRainCalculated && (\r\n          <ChanceRainChart weatherList={chanceOfRainCalculated} />\r\n        )}\r\n        <RangeSlider\r\n          title=\"Temperature [°C]\"\r\n          max={35}\r\n          min={10}\r\n          value={temperature}\r\n          onChange={setTemperature}\r\n        />\r\n        {rainFallList && (\r\n          <AmountRainFallChart weatherList={rainFallList[0].days} />\r\n        )}\r\n      </section>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import { useContext } from \"react\";\nimport { NotificationContext } from \"../contexts\";\n\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n\n  if (!context) {\n    throw Error(\n      \"Hey for use `useNotification`, check if u arent use  `NotificationProvider`.\"\n    );\n  }\n\n  return context;\n};\n","export const ROUTER_PATH_LIST = {\n    default: \"/\",\n};\n","import Dashboard from \"presentation-layer/dashboard\";\r\n\r\nimport { ROUTER_PATH_LIST } from \"./constants\";\r\n\r\nconst routes = [\r\n  {\r\n    path: ROUTER_PATH_LIST.default,\r\n    component: Dashboard,\r\n  },\r\n];\r\n\r\nexport default routes;\r\n","import Dashboard from \"./Dashboard\"\r\nimport \"./dashboard.scss\"\r\n\r\nexport default Dashboard;","import React, { Suspense } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n  HashRouter,\n} from \"react-router-dom\";\nimport routes from \"application/routes\";\nimport { QueryClientProvider, QueryClient } from \"react-query\";\n\nimport { AppLayout, Loader } from \"application/components\";\nimport { ROUTER_PATH_LIST } from \"application/constants\";\nimport { NotificationProvider } from \"application/contexts\";\nimport \"App.scss\";\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n      <QueryClientProvider client={queryClient}>\n        <NotificationProvider>\n            <HashRouter basename=\"/\">\n              <AppLayout >\n                <Suspense fallback={<Loader />}>\n                  <Switch>\n                    {routes.map(({ component: Component, ...rest }) => (\n                      <Route\n                        {...rest}\n                        key={rest.path}\n                        render={(props: any) => <Component {...props} />}\n                        exact\n                      />\n                    ))}\n                    <Redirect from=\"*\" to={ROUTER_PATH_LIST.default} />\n                  </Switch>\n                </Suspense>\n              </AppLayout>\n            </HashRouter>\n        </NotificationProvider>\n      </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}